# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "Development" ]
  pull_request:
    branches: [ "Development" ]

jobs:
  Build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [ 16.x, 18.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'yarn'
    - run: yarn
    - run: yarn build
    
  
  Build-and-push-image:
      runs-on: ubuntu-latest
      needs: Build
      if: success() && github.ref == 'refs/heads/Development'
     
      steps:
       - name: checkout code
         uses: actions/checkout@v2
         
       - name: set up QEMU
         uses: docker/setup-qemu-action@v2
       
       
       - name: set up docker buildx
         uses: docker/setup-buildx-action@v2 
         with:
           version: v0.7.0
      
       - name: Login to DockerHub
         uses: docker/login-action@v2
         with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASS }}
        
       - name: Build and push
         uses: docker/build-push-action@v3
         with:
           context: .
           push: true
           tags: teamrulerhng9/frontend:latest
           
      
  Deploy-staging:
           runs-on: ubuntu-latest
           needs: Build-and-push-image
           if: success() && github.ref == 'refs/heads/Development' 
           steps:

             - name: deploy to staging server
               uses: appleboy/ssh-action@master
               with: 
                 host: ${{ secrets.HOST }}
                 username: ${{ secrets.USERNAME }}
                 password: ${{ secrets.Password }}
                 port: ${{ secrets.PORT }}
                 script: |
                     sudo docker-compose pull
                     sudo docker-compose up -d
                     
  Deploy-prod:
           runs-on: ubuntu-latest
           needs:  ["Build", "Deploy-staging"]
           if: success() && github.ref == 'refs/heads/Development' 
           steps:

             - name: deploy to staging server
               uses: appleboy/ssh-action@master
               with: 
                 host: ${{ secrets.PROD_HOST }}
                 username: ${{ secrets.USERNAME }}
                 password: ${{ secrets.Password }}
                 port: ${{ secrets.PORT }}
                 script: |
                     cd todo-docker
                     sudo docker-compose pull
                     sudo docker-compose up -d
